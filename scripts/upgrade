#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_script_progression "Setting up source files..."

# Pink Arrows source
ynh_setup_source --dest_dir="$install_dir"

# Remove CDN link for libs picmo & picmo_popup_picker
ynh_setup_source --dest_dir="$install_dir/src/libs/picmo" --source_id="picmo"
ynh_setup_source --dest_dir="$install_dir/src/libs/picmo_popup_picker" --source_id="picmo-popup-picker"
ynh_replace --match='from "picmo";' --replace='from "../../picmo/dist/index.js"' --file="$install_dir/src/libs/picmo_popup_picker/dist/index.js"
ynh_replace --match='https://unpkg.com/@picmo/popup-picker@latest/dist/index.js?module' --replace='./libs/picmo_popup_picker/dist/index.js' --file="$install_dir/src/script.js"

## Add required lines so that picmo library uses local emojibase lib instead of CDN's - https://github.com/joeattardi/picmo/blob/main/docs/docs/02%20-%20usage/06%20-%20emoji-data.md#provided-static-data 
#~ echo -e "import emojiData from './libs/emojibase/packages/data/en/data.json' with { type: 'json' };\nimport messages from './libs/emojibase/packages/data/en/messages.json' with { type: 'json' };\n$(cat $install_dir/src/script.js)" > "$install_dir/src/script.js"
echo -e "let emojiData = [];\nlet messages = [];\nfetch('./src/libs/emojibase/packages/data/en/data.json').then(response => emojiData = response.json());\nfetch('./src/libs/emojibase/packages/data/en/messages.json').then(response => messages = response.json());
\n$(cat $install_dir/src/script.js)" > "$install_dir/src/script.js"
sed -i '/emojiPicker = createPopup({/a \ \ \ \ emojiData,\n    messages,' "$install_dir/src/script.js"

# Remove CDN link for lib emojibase
ynh_setup_source --dest_dir="$install_dir/src/libs/emojibase" --source_id="emojibase"

## Keep only 'emojibase-emojibase-data-15.3.2/packages/data/en/packages/data/en/*'
find "$install_dir/src/libs/emojibase" -mindepth 1 \
                                       -not -path "$install_dir/src/libs/emojibase/packages" \
                                       -not -path "$install_dir/src/libs/emojibase/packages/data" \
                                       -not -path "$install_dir/src/libs/emojibase/packages/data/en" \
                                       -not -path "$install_dir/src/libs/emojibase/packages/data/en/*" \
                                       -delete

## Rename files ending in .raw.json to .json in order to match the CDN's file naming (and what expects the app)
find "$install_dir/src/libs/emojibase/packages/data/en" -depth -name '*.raw.json' -exec sh -c 'f="{}"; mv -- "$f" "${f%.raw.json}.json"' \;

# Modify index.html
index_html_path="$install_dir/index.html"

## Replace upstream canonical link with YNH app domain's  
ynh_replace --match="https://www.pinkarrows.app" --replace="https://$domain$path" --file="$index_html_path"

## Download remote assets locally and subsitute remote paths with local ones

### Jsdelivr
  #      url format: https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css
  # filepath format: src/libs/bootstrap@5.3.1/dist/css/bootstrap.min.css
  # wildcard format: src/libs/bootstrap@*
pa_ynh_download_remote_assets --url_format='https://cdn.jsdelivr.net[^"]*' \
                              --cmd_filepath='cut -d/ -f5-' \
                              --cmd_path_wildcard='$(echo $filepath | cut -d/ -f-3 | cut -d@ -f1)@*' \
                              --event="$(basename $BASH_SOURCE)" \
                              --source_file="$index_html_path"

### Cloudflare
  #      url format: https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js
  # filepath format: src/libs/jquery/3.5.1/jquery.min.js
  # wildcard format: src/libs/jquery/*
pa_ynh_download_remote_assets --url_format='https://cdnjs.cloudflare.com[^"]*' \
                              --cmd_filepath='cut -d/ -f6-' \
                              --cmd_path_wildcard='$(echo $filepath | cut -d/ -f-3)/*' \
                              --event="$(basename $BASH_SOURCE)" \
                              --source_file="$index_html_path"

## Remove script block containing reference to posthog (analytics)
sed -i '/<script>/,/<\/script>/ { /posthog/!b; :a; N; /<\/script>/!ba; d; }' $index_html_path   # '/<script>/,/<\/script>/' specifies the range of lines to parse (address 1 to address 2)
                                                                                                # '{ /posthog/!b;' jumps to the end of the block if the line does not contain the string 'posthog'.
                                                                                                # ':a; N; /<\/script>/!ba;' is a loop that appends the next line to the pattern space until it finds '</script>'. Without it, the command would leave some lines the block not containing 'posthog'.
                                                                                                # 'd; }' deletes the entire block.

chown -R "$app:www-data" "$install_dir"
                                                                                            
#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================

ynh_script_progression "Upgrading system configurations related to $app..."
ynh_config_add_nginx

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Upgrade of $app completed"
